version: "3.9"
services:
  db:
    image: docker.io/library/postgres:latest
    container_name: db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes: 
      - db:/var/lib/postgresql/data
    networks:
      - backend
  back:
    container_name: spring-backend
    build:
      context: spring-boot-VMM
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://vmm.dena2rat.xyz:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - backend
      - frontend
    ports:
      - "8080:8080"
  front:
    container_name: angular-frontend
    build:
      context: angular-VMM
      dockerfile: Dockerfile
      args:
        API_BASE_URL: http://127.0.0.1:443/
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:z
      - ./data/certbot/www:/var/www/certbot:z
    restart: always
    depends_on:
      - back
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  cert:
    image: docker.io/certbot/certbot:latest
    container_name: cert
    restart: always
    networks:
      - backend
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:z
      - ./data/certbot/www:/var/www/certbot:z
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  backend: {}
  frontend: {}


