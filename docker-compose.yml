version: "3.9"
services:
  db:
    image: docker.io/library/postgres:latest
    container_name: db
    restart: always
    expose:
      - 5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes: 
      - db:/var/lib/postgresql/data
    networks:
      - backend
  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    networks: 
      - backend
    depends_on:
      - db
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:5050"
  prometheus:
    image: docker.io/prom/prometheus:latest
    container_name: prometheus
    user: "65534:65534"
    depends_on:
      - back
      - node_exporter
    networks: 
      - backend
    volumes:
      - ./prometheus-grafana/prometheus/prometheus.yml:/prometheus/prometheus.yml:Z
    ports:
      - 9090:9090
    command:
      - '--config.file=/prometheus/prometheus.yml'
  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: grafana
    user: "root:root"
    networks: 
      - backend
    volumes:
      - ./prometheus-grafana/grafana/grafana.ini:/grafana/grafana.ini
      - ./prometheus-grafana/grafana/datasource.yml:/grafana/provisioning/datasources/datasource.yaml
      - grafana-storage:/var/lib/grafana
    ports:
      - 3000:3000
    links:
      - prometheus
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    expose:
      - 9100
  back:
    container_name: spring-backend
    build:
      context: spring-boot-VMM
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    networks:
      - backend
    ports:
      - "8080:8080"
  front:
    container_name: angular-frontend
    build:
      context: angular-VMM
      dockerfile: Dockerfile
      args:
        API_BASE_URL: http://127.0.0.1:443/
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend
    restart: always
    depends_on:
      - back

networks:
  backend: {}


volumes: 
  db: 
    driver: local
  grafana-storage:
    driver: local
  pgadmin-data:
    driver: local